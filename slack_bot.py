import os
from slack_bolt import App
from slack_bolt.adapter.socket_mode import SocketModeHandler
from corporate_translator import generate

app = App(token=os.environ["SLACK_BOT_TOKEN"])

@app.command("/tellboss")
def handle_tellboss_command(ack, say, command, logger):
    ack()
    
    user_message = command["text"]
    if not user_message or user_message.strip() == "":
        say("Useage: `/tellboss [your message]`\nExample: `/tellboss Gimme a raise`")
        return
    
    response = generate(user_message)
    
    blocks = [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": "ðŸ“¢ Message for Your Boss"
            }
        },
                {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*Your Message:*\n\n> {user_message}"
            }
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*Generated Response:*\n\n> {response}"
            }
        },
        {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": f"Requested by <@{command['user_id']}> | Corporate Translator "
                }
            ]
        },
        {
            "type": "divider"
        },
        {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": "âœ… Use This"
                    },
                    "action_id": "use_message",
                    "style": "primary",
                    "value": response
                },
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": "ðŸ”„ Regenerate"
                    },
                    "action_id": "regenerate_message",
                    "value": user_message
                }
            ]
        }
    ]
    
    say(blocks=blocks, text=f"Message for your boss: {response}")
    

@app.action("use_message")
def handle_use_message(ack, body, say, logger):
    ack()
    message = body["actions"][0]["value"]
    user_id = body["user"]["id"]
    say(f"âœ… <@{user_id}> used this message: \n\n> {message}")

@app.action("regenerate_message")
def handle_regenerate_message(ack, body, say, logger):
    ack()
    original_message = body["actions"][0]["value"]
    user_id = body["user"]["id"]

    new_response = generate(original_message)
    blocks = [
        {
            "type": "header",
            "text": {
                "type": "plain_text",
                "text": "ðŸ”„ Regenerated Message for Your Boss"
            }
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*Original Message:*\n\n> {original_message}"
            }
        },
        {
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": f"*New Response:*\n\n> {new_response}"
            }
        },
        {
            "type": "context",
            "elements": [
                {
                    "type": "mrkdwn",
                    "text": f"Regenerated by <@{user_id}> | Corporate Translator"
                }
            ]
        },
        {
            "type": "divider"
        },
        {
            "type": "actions",
            "elements": [
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": "âœ… Use This"
                    },
                    "action_id": "use_message",
                    "style": "primary",
                    "value": new_response
                },
                {
                    "type": "button",
                    "text": {
                        "type": "plain_text",
                        "text": "ðŸ”„ Regenerate Again"
                    },
                    "action_id": "regenerate_message",
                    "value": original_message
                }
            ]
        }
    ]
    say(blocks=blocks, text=f"Regenerated message for your boss: {new_response}")

if __name__ == "__main__":
    handler = SocketModeHandler(app, os.environ["SLACK_BOT_SOCKET_TOKEN"])
    handler.start()